#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/9781a61d-c3de-4bbe-bc83-cced9549516f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float graph;
  int distance;
  CloudLocation location;
  bool led;
  bool led2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#define trigPin D3
#define echoPin D2
#define redled D0
#define greenled D1
#define floatsen D7
int duration;
#include <SoftwareSerial.h> 
#include <TinyGPS.h> 
unsigned long prev=0,curr=0;
float lat = 28.5458,lon = 77.1703; // create variable for latitude and longitude object  
SoftwareSerial gpsSerial(D4,D5);//rx,tx 
TinyGPS gps; // create gps object 

#include "thingProperties.h"

void setup() {

led=0;
led2=0;

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(redled, OUTPUT);
  digitalWrite(redled, LOW);
  pinMode(greenled, OUTPUT);
  digitalWrite(greenled, LOW);
  pinMode(floatsen, INPUT_PULLUP);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  gpsSerial.begin(9600); // connect gps sensor 

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if((millis()-prev)>100){
    prev=millis();

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  int f=digitalRead(floatsen); 

  duration = pulseIn(echoPin, HIGH);
  graph=distance;
  distance = duration*0.034/2;

  if(distance<=5)
   {
    sendgps();
    led=1;
    digitalWrite(redled, HIGH);
   }
   
  else if(f>=1)
   {
    led2=1;
    sendgps();
    digitalWrite(greenled, HIGH);
   }
  
  else
   {
    digitalWrite(redled, LOW);
    digitalWrite(greenled, LOW);
    led=0;
    led2=0;
   }
  Serial.println("Distance: ");
  Serial.println(distance);
  Serial.println("Float Level: ");
  Serial.println(f);
  }
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onLedChange()  {
  // Add your code here to act upon Led change
}

/*
  Since Distance is READ_WRITE variable, onDistanceChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onDistanceChange()  {
  // Add your code here to act upon Distance change
  Serial.println("run");
}

/*
  Since Graph is READ_WRITE variable, onGraphChange() is
  executed every time a new value is received from IoT Cloud.
*/

void sendgps(){
  // Your code here 
  while(gpsSerial.available()){ // check for gps data 
  if(gps.encode(gpsSerial.read()))// encode gps data 
  {  
  gps.f_get_position(&lat,&lon); // get latitude and longitude 
  // display position 
  Serial.print("Position: "); 
  Serial.print("Latitude:"); 
  Serial.print(lat,6); 
  Serial.print(";"); 
  Serial.print("Longitude:"); 
  Serial.println(lon,6);  
  Serial.print(lat); 
  Serial.print(" "); 
  location = {lat, lon};
 } 
} 

}

void onGraphChange()  {
  // Add your code here to act upon Graph change
}

/*
  Since Led2 is READ_WRITE variable, onLed2Change() is
  executed every time a new value is received from IoT Cloud.
*/

void onLed2Change()  {
  // Add your code here to act upon Led2 change
}